(* 練習問題 3.15 *)

(*
int -> int -> int -> int
(int -> int) -> int -> int
(int -> int -> int) -> int
の違いを説明しろと言われても書いてある通り型が違うとしか説明のしようがないのだが, 頑張って説明する.

それぞれの型は関数の型結合を明示すると以下のようになる
(int)               -> (int -> int -> int)
(int -> int)        -> (int -> int)
(int -> int -> int) -> int
それぞれの場合について引数として int型,(int->int)型, (int->int->int)型 をとり, 且つ租の型しか許されないという点で明確な違いがある.
返り値の型についても同様に異なる. 
カリー化関数であっても全ての関数は1引数関数とみなすべきであり, 引数と返り値の型が違うことを言えば十分な説明になっているであろう.

以下にそれぞれの3つの型を持つ関数例を定義する. 
*)

(* 3つの引数の積を返す関数 *)
let product3 = fun x y z -> x * y * z;;
product3 3 4 5;;

(* (わざわざ) 第1引数の関数を第2引数の値に適用させる関数 *)
let tekiyou_int = fun (f:int->int) a -> f a;;
tekiyou_int (fun x -> x-1) 3;;

(* 2引数関数を受け取り, 両引数が1のときの値を返す関数(引数の値に意味はない) *)
let xy_11 = fun f -> f 1 1;;
xy_11 (fun x y -> 5*x + 7*y);; (* かなり意味のない関数になってしまった:-) *)
