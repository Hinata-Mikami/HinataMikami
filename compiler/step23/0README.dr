 Step 2.3. Compiling unary expressions with one variable and
     simple binary expressions (that is, binary expressions
     whose one operand requires no computation)

 Source language: 
       a single integer variable x
       integer constants
       true and false booleans
       unary operations: -, succ, pred, not, is_zero
       parentheses
       binary operations: +

        Define the language, abstractly
lang.mli             The extension
../step22/lang.mli          Previous language definition (as lang_22.mli)

pp_ast.ml            Pretty-printer (maybe not so pretty)
../step22/pp_ast.ml         Previous version (as pp_ast_22.ml)

../step22/tokenizer.ml         Tokenizer, as before (no need for extension)

parser.ml            Parser

types.mli            Refactoring: type-representation
types.ml             and its implementation

compiler.ml          Another implementation of lang.mli: compiler
                     (Type-checking, etc.)

code_gen.ml          Another implementation: code generator
../step22/code_gen.ml       Previous version (as code_gen_22.ml)

../step21/driver.ml  Main driver, as before

        Back-end 

../step22/asm.mli         Assembly language
../step22/asm.ml          Assembly language

        Testing
test_script_21.ml Previous tests, which should pass (adjustment for parenth)
test_script_22.ml Previous tests, which should pass (adjustment for parenth)
test_script.ml  Test script, new test

../step22/init.c          The start-up code

build.ml         How to make it: the build script
