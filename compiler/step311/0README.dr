  Step 31. Compiling unary expressions with one variable and
     simple binary expressions (that is, binary expressions
     whose one operand requires no computation)
     AND local variables

 Source language: 
       a single integer variable x
       integer (signed) constants
       true and false booleans
       unary operations: -, succ, pred, not, is_zero
       parentheses
       local variables
       binary operations: +


        Define the language, abstractly
../step300/lang.mli             The definition


../step300/pp_ast.ml            Pretty-printer (maybe not so pretty)

../step30/lexer.mll            Lexer
../step302/parser.mly          Parser

compiler.ml          Another implementation of lang.mli: compiler
                     (Type-checking, etc.)

hole.ml              Holes/questions
qna.ml               Question-answering system

code_gen.ml          Another implementation: code generator
../step23/code_gen.ml   Previous version, to be extended (as code_gen_23.ml)

../step24/driver.ml  Main driver, adjusted for lexer

../step22/init.c     The start-up code (as before)

        Back-end 

asm.mli            Extended Assembly
asm.ml
../step22/asm.mli         Original
../step22/asm.ml          (as asm_impl_22.ml)

        Testing
test_script_21.ml  Earlier test script, adjusted: xxx is accepted now
test_script_22.ml  Earlier test script
test_script.ml  Test script

build.ml         How to make it: the build script


