type token =
  | INT of (
# 6 "parser.mly"
        int
# 6 "parser.ml"
)
  | ID of (
# 7 "parser.mly"
        string
# 11 "parser.ml"
)
  | TRUE
  | FALSE
  | LET
  | IN
  | EQ
  | IF
  | THEN
  | ELSE
  | ADD
  | SUB
  | MUL
  | DIV
  | LT
  | LPAR
  | RPAR
  | DSC
  | EOF
  | FUN
  | ARROW
  | REC
  | MATCH
  | WITH
  | OR
  | END
  | COMMA
  | LBPAR
  | RBPAR
  | CONS
  | AND

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
  open Syntax
  (* ここに書いたものは，Parser.mliに入らないので注意 *)
# 48 "parser.ml"
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
  261 (* LET *);
  262 (* IN *);
  263 (* EQ *);
  264 (* IF *);
  265 (* THEN *);
  266 (* ELSE *);
  267 (* ADD *);
  268 (* SUB *);
  269 (* MUL *);
  270 (* DIV *);
  271 (* LT *);
  272 (* LPAR *);
  273 (* RPAR *);
  274 (* DSC *);
    0 (* EOF *);
  275 (* FUN *);
  276 (* ARROW *);
  277 (* REC *);
  278 (* MATCH *);
  279 (* WITH *);
  280 (* OR *);
  281 (* END *);
  282 (* COMMA *);
  283 (* LBPAR *);
  284 (* RBPAR *);
  285 (* CONS *);
  286 (* AND *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\003\000\003\000\001\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\006\000\006\000\007\000\
\007\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\009\000\009\000\008\000\008\000\011\000\011\000\011\000\011\000\
\011\000\010\000\010\000\010\000\012\000\012\000\012\000\004\000\
\000\000\000\000\000\000"

let yylen = "\002\000\
\005\000\002\000\002\000\004\000\001\000\006\000\006\000\007\000\
\008\000\004\000\005\000\002\000\003\000\002\000\002\000\005\000\
\000\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\002\000\001\000\004\000\005\000\001\000\001\000\005\000\002\000\
\003\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\037\000\035\000\038\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\026\000\034\000\000\000\000\000\000\000\043\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\002\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\000\000\001\000\000\000\015\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\028\000\
\000\000\016\000"

let yydgoto = "\004\000\
\015\000\069\000\024\000\075\000\017\000\076\000\089\000\070\000\
\018\000\019\000\071\000\020\000"

let yysindex = "\129\000\
\019\255\019\255\059\255\000\000\000\000\000\000\000\000\000\000\
\012\255\019\255\019\255\001\255\019\255\000\255\000\000\005\000\
\161\255\155\255\000\000\000\000\013\255\012\255\238\254\000\000\
\000\000\047\255\067\255\036\255\245\254\065\255\089\255\000\000\
\000\000\019\255\155\255\155\255\155\255\155\255\155\255\155\255\
\019\255\000\000\104\255\000\000\047\255\019\255\019\255\000\000\
\019\255\019\255\133\255\013\255\166\255\058\255\058\255\000\000\
\000\000\166\255\015\255\019\255\085\255\030\255\029\255\040\255\
\013\255\000\000\019\255\118\255\092\255\000\000\123\255\000\000\
\025\255\019\255\085\255\004\255\019\255\019\255\000\000\053\255\
\000\000\019\255\019\255\000\000\013\255\000\000\019\255\047\255\
\141\255\013\255\013\255\019\255\013\255\115\255\013\255\047\255\
\019\255\073\255\133\255\000\000\085\255\013\255\000\000\000\000\
\120\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\123\000\001\000\000\000\000\000\148\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\145\000\076\000\026\000\051\000\000\000\
\000\000\101\000\000\000\000\000\000\000\000\000\000\000\000\000\
\167\000\093\255\000\000\000\000\000\000\000\000\000\000\113\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\255\000\000\000\000\000\000\007\255\000\000\000\000\000\000\
\000\000\189\000\211\000\000\000\131\255\000\000\233\000\000\000\
\000\000\000\000\000\000\000\000\000\000\255\000\090\255\000\000\
\147\255\000\000"

let yygindex = "\000\000\
\000\000\006\000\000\000\003\000\126\000\185\255\049\000\070\000\
\000\000\152\000\000\000\207\255"

let yytablesize = 541
let yytable = "\044\000\
\024\000\072\000\030\000\086\000\033\000\048\000\016\000\021\000\
\023\000\087\000\034\000\027\000\014\000\025\000\049\000\028\000\
\029\000\034\000\031\000\005\000\006\000\007\000\008\000\009\000\
\043\000\018\000\010\000\032\000\045\000\105\000\077\000\048\000\
\026\000\088\000\011\000\077\000\014\000\012\000\078\000\052\000\
\013\000\034\000\084\000\034\000\047\000\014\000\059\000\061\000\
\025\000\072\000\019\000\062\000\063\000\034\000\064\000\065\000\
\079\000\034\000\034\000\005\000\006\000\007\000\008\000\022\000\
\034\000\073\000\010\000\032\000\034\000\048\000\038\000\039\000\
\080\000\046\000\011\000\022\000\012\000\012\000\092\000\085\000\
\013\000\034\000\090\000\091\000\050\000\014\000\025\000\093\000\
\094\000\103\000\096\000\074\000\095\000\035\000\035\000\035\000\
\035\000\098\000\101\000\035\000\023\000\034\000\102\000\035\000\
\035\000\035\000\035\000\035\000\035\000\031\000\060\000\051\000\
\030\000\034\000\034\000\034\000\034\000\034\000\011\000\034\000\
\082\000\035\000\005\000\034\000\034\000\034\000\034\000\034\000\
\034\000\001\000\002\000\003\000\029\000\005\000\066\000\007\000\
\008\000\009\000\099\000\100\000\010\000\034\000\083\000\034\000\
\013\000\081\000\097\000\042\000\067\000\088\000\033\000\012\000\
\017\000\106\000\013\000\005\000\006\000\007\000\008\000\068\000\
\053\000\054\000\055\000\056\000\057\000\058\000\004\000\035\000\
\104\000\042\000\041\000\036\000\037\000\038\000\039\000\040\000\
\036\000\037\000\038\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\000\000\024\000\000\000\000\000\024\000\
\024\000\024\000\024\000\000\000\000\000\024\000\024\000\018\000\
\018\000\034\000\018\000\018\000\018\000\018\000\000\000\000\000\
\018\000\000\000\018\000\018\000\000\000\018\000\000\000\000\000\
\018\000\018\000\018\000\018\000\000\000\000\000\018\000\018\000\
\019\000\019\000\000\000\019\000\019\000\019\000\019\000\000\000\
\000\000\019\000\000\000\019\000\019\000\000\000\019\000\000\000\
\000\000\019\000\019\000\019\000\019\000\000\000\000\000\019\000\
\019\000\022\000\022\000\000\000\022\000\022\000\000\000\000\000\
\000\000\000\000\022\000\000\000\022\000\022\000\000\000\022\000\
\000\000\000\000\022\000\022\000\022\000\022\000\000\000\000\000\
\022\000\022\000\023\000\023\000\000\000\023\000\023\000\000\000\
\000\000\000\000\000\000\023\000\000\000\023\000\023\000\000\000\
\023\000\000\000\000\000\023\000\023\000\023\000\023\000\000\000\
\005\000\023\000\023\000\005\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\005\000\000\000\005\000\000\000\
\000\000\005\000\005\000\005\000\005\000\000\000\013\000\005\000\
\005\000\013\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\000\000\013\000\000\000\000\000\013\000\
\013\000\013\000\013\000\000\000\004\000\000\000\013\000\004\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\004\000\000\000\004\000\000\000\000\000\004\000\004\000\004\000\
\004\000\000\000\007\000\000\000\004\000\007\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\007\000\000\000\
\007\000\000\000\000\000\007\000\007\000\007\000\007\000\000\000\
\006\000\000\000\007\000\006\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\006\000\000\000\006\000\000\000\
\000\000\006\000\006\000\006\000\006\000\000\000\008\000\000\000\
\006\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\008\000\000\000\008\000\000\000\000\000\008\000\
\008\000\008\000\008\000\000\000\009\000\000\000\008\000\009\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\009\000\000\000\009\000\000\000\000\000\009\000\009\000\009\000\
\009\000\000\000\000\000\000\000\009\000"

let yycheck = "\018\001\
\000\000\051\000\002\001\075\000\000\000\017\001\001\000\002\000\
\003\000\006\001\029\001\009\000\006\001\002\001\026\001\010\000\
\011\000\029\001\013\000\001\001\002\001\003\001\004\001\005\001\
\022\000\000\000\008\001\028\001\026\000\101\000\006\001\017\001\
\021\001\030\001\016\001\006\001\030\001\019\001\010\001\034\000\
\022\001\029\001\018\001\029\001\009\001\027\001\041\000\045\000\
\002\001\099\000\000\000\046\000\047\000\029\001\049\000\050\000\
\017\001\029\001\029\001\001\001\002\001\003\001\004\001\005\001\
\029\001\060\000\008\001\020\001\029\001\017\001\013\001\014\001\
\067\000\007\001\016\001\000\000\029\001\019\001\026\001\074\000\
\022\001\029\001\077\000\078\000\020\001\027\001\002\001\082\000\
\083\000\017\001\088\000\007\001\087\000\001\001\002\001\003\001\
\004\001\092\000\096\000\007\001\000\000\029\001\097\000\011\001\
\012\001\013\001\014\001\015\001\016\001\020\001\007\001\023\001\
\020\001\001\001\002\001\003\001\004\001\029\001\029\001\007\001\
\029\001\029\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\001\000\002\000\003\000\020\001\001\001\002\001\003\001\
\004\001\005\001\024\001\025\001\008\001\029\001\020\001\029\001\
\000\000\028\001\006\001\000\000\016\001\030\001\020\001\019\001\
\006\001\105\000\022\001\001\001\002\001\003\001\004\001\027\001\
\035\000\036\000\037\000\038\000\039\000\040\000\000\000\007\001\
\099\000\018\000\016\001\011\001\012\001\013\001\014\001\015\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\006\001\
\007\001\029\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\255\255\017\001\018\001\255\255\020\001\255\255\255\255\
\023\001\024\001\025\001\026\001\255\255\255\255\029\001\030\001\
\006\001\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\255\255\017\001\018\001\255\255\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\030\001\006\001\007\001\255\255\009\001\010\001\255\255\255\255\
\255\255\255\255\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\030\001\006\001\007\001\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\255\255\017\001\018\001\255\255\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\255\255\
\006\001\029\001\030\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\255\255\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\255\255\006\001\029\001\
\030\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\255\255\006\001\255\255\030\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\255\255\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\255\255\006\001\255\255\030\001\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\255\255\
\006\001\255\255\030\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\255\255\020\001\255\255\
\255\255\023\001\024\001\025\001\026\001\255\255\006\001\255\255\
\030\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\255\255\006\001\255\255\030\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\255\255\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\255\255\255\255\255\255\030\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  LET\000\
  IN\000\
  EQ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  LT\000\
  LPAR\000\
  RPAR\000\
  DSC\000\
  EOF\000\
  FUN\000\
  ARROW\000\
  REC\000\
  MATCH\000\
  WITH\000\
  OR\000\
  END\000\
  COMMA\000\
  LBPAR\000\
  RBPAR\000\
  CONS\000\
  AND\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 45 "parser.mly"
                         ( CLet(_2,_4) )
# 344 "parser.ml"
               : Syntax.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 46 "parser.mly"
                         ( CExp _1 )
# 351 "parser.ml"
               : Syntax.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 50 "parser.mly"
             (_1)
# 358 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 54 "parser.mly"
                                ( EFun(_2,_4) )
# 366 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 55 "parser.mly"
                                ( _1 )
# 373 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 56 "parser.mly"
                                ( EIf(_2,_4,_6) )
# 382 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 57 "parser.mly"
                                ( ELet(_2, _4, _6) )
# 391 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'rec_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 58 "parser.mly"
                                     (ERLet(_3,_4,_5,_7) )
# 401 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'rec_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'let_expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 59 "parser.mly"
                                              ( ERLetand ([(_3, _4, _5)] @ _6, _8 ) )
# 412 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'match_expr) in
    Obj.repr(
# 60 "parser.mly"
                               ( EMatch (_2, _4) )
# 420 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Syntax.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 61 "parser.mly"
                              ( EPair (_2, _4) )
# 428 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                ( ENil )
# 434 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 63 "parser.mly"
                   ( ECons (_1, _3) )
# 442 "parser.ml"
               : Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 67 "parser.mly"
            (_2)
# 449 "parser.ml"
               : 'rec_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rec_expr) in
    Obj.repr(
# 68 "parser.mly"
                 ( EFun(_1, _2) )
# 457 "parser.ml"
               : 'rec_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'rec_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'let_expr) in
    Obj.repr(
# 71 "parser.mly"
                                  ( [(_2, _3, _4)] @ _5 )
# 467 "parser.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
     ( [] )
# 473 "parser.ml"
               : 'let_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 77 "parser.mly"
                                 ( EBin(OpAdd,_1,_3) )
# 481 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 78 "parser.mly"
                                 ( EBin(OpSub,_1,_3) )
# 489 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 79 "parser.mly"
                                 ( EBin(OpMul,_1,_3) )
# 497 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 80 "parser.mly"
                                 ( EBin(OpDiv,_1,_3) )
# 505 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 81 "parser.mly"
                                 ( EBin(OpEq,_1,_3) )
# 513 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 82 "parser.mly"
                                 ( EBin(OpLt,_1,_3) )
# 521 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_expr) in
    Obj.repr(
# 83 "parser.mly"
                                 ( _1 )
# 528 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 88 "parser.mly"
                         ( EApp(_1,_2) )
# 536 "parser.ml"
               : 'app_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 89 "parser.mly"
                         ( _1 )
# 543 "parser.ml"
               : 'app_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 93 "parser.mly"
                           ( EMatchpairend (_1, _3) )
# 551 "parser.ml"
               : 'match_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'match_expr) in
    Obj.repr(
# 94 "parser.mly"
                                     ( EBin (OpOr, EMatchpair (_1, _3), _5) )
# 560 "parser.ml"
               : 'match_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 98 "parser.mly"
                    ( ELiteral _1 )
# 567 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
       ( EVar (_1) )
# 574 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Syntax.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 100 "parser.mly"
                              ( EPair (_2, _4) )
# 582 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                ( ENil )
# 588 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.expr) in
    Obj.repr(
# 102 "parser.mly"
                   ( ECons (_1, _3) )
# 596 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 106 "parser.mly"
                    ( ELiteral _1 )
# 603 "parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                    ( EVar(_1) )
# 610 "parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.expr) in
    Obj.repr(
# 108 "parser.mly"
                    ( _2 )
# 617 "parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "parser.mly"
          ( LInt _1 )
# 624 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
          ( LBool true )
# 630 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
          ( LBool false )
# 636 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
        ( _1 )
# 643 "parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.expr)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Syntax.expr)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Syntax.command)
